{"version":3,"file":"27b19d4c42bc577fcf3485a33110628e934621e5-a8d4213e99cea4e9fa96.js","mappings":"qOAEMA,EAAY,WAkBd,OACE,sBAAIC,UAAU,+BACZ,sBAAIC,GAAG,kBAAP,mHAIA,sBAAIA,GAAG,eAAP,6G,UCPFC,EAAS,SAACC,GACd,OACE,gBAAC,KAAD,KACE,uBAAKH,UAAU,0CACb,uBAAKA,UAAU,aACb,uBAAKA,UAAU,iBACb,0BACEI,KAAK,SACLJ,UAAU,gBACV,cAAY,WACZ,cAAY,oBAEZ,wBAAMA,UAAU,aAChB,wBAAMA,UAAU,aAChB,wBAAMA,UAAU,eAGpB,uBAAKA,UAAU,4BACb,sBAAIA,UAAU,kBACZ,sBAAIC,GAAG,cACL,gBAAC,KAAD,CAAMI,GAAG,KAAT,SAEF,sBAAIL,UAAU,YACZ,qBAAGM,KAAK,IAAIN,UAAU,kBAAkB,cAAY,YAApD,SACQ,qBAAGA,UAAU,WAErB,sBAAIA,UAAU,iBACZ,sBAAIC,GAAG,kBACL,gBAAC,KAAD,CAAMI,GAAG,cAAT,cAEF,sBAAIJ,GAAG,qBACL,gBAAC,KAAD,CAAMI,GAAG,gBAAT,kBAIN,sBAAIL,UAAU,YACZ,qBAAGM,KAAK,IAAIN,UAAU,kBAAkB,cAAY,YAApD,aACY,qBAAGA,UAAU,WAEzB,sBAAIA,UAAU,iBACZ,sBAAIC,GAAG,oBACL,gBAAC,KAAD,CAAMI,GAAG,gBAAT,eAEF,sBAAIJ,GAAG,iBAAP,iDAGA,sBAAIA,GAAG,gBACL,gBAAC,KAAD,CAAMI,GAAG,0BAAT,iBAIN,sBAAIL,UAAU,WAAWC,GAAG,oBAC1B,qBAAGK,KAAK,IAAIN,UAAU,kBAAkB,cAAY,YAApD,WACU,qBAAGA,UAAU,WAEvB,sBAAIA,UAAU,iBACZ,sBAAIC,GAAG,gBACL,qBAAGK,KAAK,gDAAR,oBAIF,sBAAIL,GAAG,gBACL,qBAAGK,KAAK,gDAAR,oBAIF,sBAAIL,GAAG,gBACL,qBAAGK,KAAK,gDAAR,sBAMN,sBAAIL,GAAG,iBAAP,kDAxDJ,QA4DG,GAAS,gBAACF,EAAD,SAIbI,EAAMI,wBACP,uBACEP,UAAU,yBACVO,wBAAyB,CACvBC,OACEL,EAAMI,wBAAwBC,OAA9B,2KAUN,uBAAKR,UAAU,0BACZG,EAAMM,SACP,2BACA,8BACE,+BAAW,IAAIC,MAAOC,cAAtB,gC,o92CChHNC,GAAUC,EAAAA,EAAAA,eAIb,CACDC,UAAW,GACXC,YAAa,GACbC,OAAQ,KAKNC,OAQYC,EAEVC,EAAqB,SAAChB,GAC1B,OAA8BiB,EAAAA,EAAAA,UAI3B,CACDN,UAAWO,EAAAA,EACXN,YAAaO,EAAAA,EACbN,OAAQO,EAAAA,IAPHC,EAAP,KAAgBC,EAAhB,KAYA,OAFAR,EAAWQ,EAEJ,gBAACb,EAAQc,SAAT,CAAkBC,MAAOH,GAAUrB,EAAMM,WAG5CmB,EAAsB,WAC1B,IAAMC,GACJC,EAAAA,EAAAA,YACElB,GAGJ,QAAcM,IAAVW,EACF,MAAM,IAAIE,MAAM,yCAGlB,OAAOF,GAGHG,EAAsB,SAACH,GAK3B,QAAiBX,IAAbD,EACF,MAAM,IAAIc,MAAM,2DAGlBd,EAASY","sources":["webpack://@cognizant-softvision/automation-test-site/./src/components/shared/loginForm.tsx","webpack://@cognizant-softvision/automation-test-site/./src/components/shared/layout.tsx","webpack://@cognizant-softvision/automation-test-site/./src/hooks/context-hooks.tsx"],"sourcesContent":["import React from \"react\";\n\nconst LoginForm = () => {\n  let loggedIn = false;\n\n  if (loggedIn) {\n    return (\n      <ul className=\"nav navbar-nav navbar-right\">\n        <li>\n          Html.ActionLink(\"Hello \" + User.Identity.GetUserName() + \"!\", \"Index\",\n          \"Manage\", routeValues: null, htmlAttributes: new title = \"Manage\" )\n        </li>\n        <li>\n          <a href=\"javascript:document.getElementById('logoutForm').submit()\">\n            Log off\n          </a>\n        </li>\n      </ul>\n    );\n  } else {\n    return (\n      <ul className=\"nav navbar-nav navbar-right\">\n        <li id=\"RegisterButton\">\n          Html.ActionLink(\"Register\", \"Register\", \"Account\", routeValues: null,\n          htmlAttributes: new id = \"registerLink\" )\n        </li>\n        <li id=\"LogInButton\">\n          Html.ActionLink(\"Log in\", \"Login\", \"Account\", routeValues: null,\n          htmlAttributes: new id = \"loginLink\" )\n        </li>\n      </ul>\n    );\n  }\n};\n\nexport { LoginForm };\n","import * as React from \"react\";\nimport { Link } from \"gatsby\";\nimport { LoginForm } from \"./loginForm\";\nimport PropTypes from \"prop-types\";\nimport \"../../../static/Content/bootstrap-theme.css\";\nimport \"../../../static/Content/bootstrap.css\";\nimport \"../../../static/Content/Site.css\";\nimport \"./layout.css\";\nimport { ApplicationContext } from \"../../hooks/context-hooks\";\n\n/**\n * Layout for the Magenic Automation Site pages.\n * Ported from Views/Shared/_Layout.cshtml\n *\n * TODO: Fix page title.\n * TODO: Make static path prefixing context aware.\n * @param props React props. Children are required, and a page title is optional.\n * @returns A React element that wraps the children in a navigation bar and footer.\n */\nconst Layout = (props: any) => {\n  return (\n    <ApplicationContext>\n      <div className=\"navbar navbar-inverse navbar-fixed-top\">\n        <div className=\"container\">\n          <div className=\"navbar-header\">\n            <button\n              type=\"button\"\n              className=\"navbar-toggle\"\n              data-toggle=\"collapse\"\n              data-target=\".navbar-collapse\"\n            >\n              <span className=\"icon-bar\"></span>\n              <span className=\"icon-bar\"></span>\n              <span className=\"icon-bar\"></span>\n            </button>\n          </div>\n          <div className=\"navbar-collapse collapse\">\n            <ul className=\"nav navbar-nav\">\n              <li id=\"homeButton\">\n                <Link to=\"/\">Home</Link>\n              </li>\n              <li className=\"dropdown\">\n                <a href=\"#\" className=\"dropdown-toggle\" data-toggle=\"dropdown\">\n                  Manage<b className=\"caret\"></b>\n                </a>\n                <ul className=\"dropdown-menu\">\n                  <li id=\"EmployeeButton\">\n                    <Link to=\"/Employees\">Employees</Link>\n                  </li>\n                  <li id=\"DepartmentsButton\">\n                    <Link to=\"/Departments\">Departments</Link>\n                  </li>\n                </ul>\n              </li>\n              <li className=\"dropdown\">\n                <a href=\"#\" className=\"dropdown-toggle\" data-toggle=\"dropdown\">\n                  Automation<b className=\"caret\"></b>\n                </a>\n                <ul className=\"dropdown-menu\">\n                  <li id=\"AutomationButton\">\n                    <Link to=\"/Automation/\">Automation</Link>\n                  </li>\n                  <li id=\"SwaggerButton\">\n                    Html.ActionLink(\"Swagger API\", \"\", \"Swagger\")\n                  </li>\n                  <li id=\"iFrameButton\">\n                    <Link to=\"/Automation/iFramePage\">iFramePage</Link>\n                  </li>\n                </ul>\n              </li>\n              <li className=\"dropdown\" id=\"TrainingDropdown\">\n                <a href=\"#\" className=\"dropdown-toggle\" data-toggle=\"dropdown\">\n                  Training<b className=\"caret\"></b>\n                </a>\n                <ul className=\"dropdown-menu\">\n                  <li id=\"iFrameButton\">\n                    <a href=\"/AutomationTestSite/Training1/LoginPage.html\">\n                      Training Page 1\n                    </a>\n                  </li>\n                  <li id=\"iFrameButton\">\n                    <a href=\"/AutomationTestSite/Training2/LoginPage.html\">\n                      Training Page 2\n                    </a>\n                  </li>\n                  <li id=\"iFrameButton\">\n                    <a href=\"/AutomationTestSite/Training3/LoginPage.html\">\n                      Training Page 3\n                    </a>\n                  </li>\n                </ul>\n              </li>\n              <li id=\"ContactButton\">\n                Html.ActionLink(\"Contact\", \"Contact\", \"Home\")\n              </li>\n            </ul>\n            {false ?? <LoginForm /> /*Commented out in legacy ASP application*/}\n          </div>\n        </div>\n      </div>\n      {!!props.dangerouslySetInnerHTML ? (\n        <div\n          className=\"container body-content\"\n          dangerouslySetInnerHTML={{\n            __html:\n              props.dangerouslySetInnerHTML.__html +\n              /* Add footer to the end */ `\n            <hr />\n            <footer>\n              <p>&copy; {new Date().getFullYear()} - Magenic Technologies</p>\n            </footer>         \n          `,\n          }}\n        />\n      ) : (\n        <div className=\"container body-content\">\n          {props.children}\n          <hr />\n          <footer>\n            <p>&copy; {new Date().getFullYear()} - Magenic Technologies</p>\n          </footer>\n        </div>\n      )}\n    </ApplicationContext>\n  );\n};\n\nLayout.propTypes = {\n  children: PropTypes.any.isRequired,\n  title: PropTypes.string,\n  dangerouslySetInnerHTML: PropTypes.object,\n};\n\nexport { Layout };\n","import React, { useContext, createContext, useState } from \"react\";\nimport employeeList from \"../data/employee-list.json\";\nimport departmentList from \"../data/department-list.json\";\nimport stateList from \"../data/state-list.json\";\n\n// TODO: Cleanup once POC is functional.\n\nconst Context = createContext<{\n  employees: any[];\n  departments: any[];\n  states: any[];\n}>({\n  employees: [],\n  departments: [],\n  states: [],\n});\n\n// ApplicationContext can only be initialized once in the React DOM\n// If mutliple simultaneous contexts are needed, this is going to need to get a lot more complicated...\nlet setState:\n  | React.Dispatch<\n      React.SetStateAction<{\n        employees: any[];\n        departments: any[];\n        states: any[];\n      }>\n    >\n  | undefined = undefined;\n\nconst ApplicationContext = (props: any) => {\n  const [context, setContext] = useState<{\n    employees: any[];\n    departments: any[];\n    states: any[];\n  }>({\n    employees: employeeList.employees,\n    departments: departmentList.departments,\n    states: stateList.states,\n  });\n\n  setState = setContext;\n\n  return <Context.Provider value={context}>{props.children}</Context.Provider>;\n};\n\nconst useApplicationState = () => {\n  const state =\n    useContext<{ employees: any[]; departments: any[]; states: any[] }>(\n      Context\n    );\n\n  if (state === undefined) {\n    throw new Error(\"Must be used in a ApplicationContext!\");\n  }\n\n  return state;\n};\n\nconst setApplicationState = (state: {\n  employees: any[];\n  departments: any[];\n  states: any[];\n}) => {\n  if (setState === undefined) {\n    throw new Error(\"ApplicationContext MUST be initialized to set the state\");\n  }\n\n  setState(state);\n};\n\nexport { ApplicationContext, useApplicationState, setApplicationState };\n"],"names":["LoginForm","className","id","Layout","props","type","to","href","dangerouslySetInnerHTML","__html","children","Date","getFullYear","Context","createContext","employees","departments","states","setState","undefined","ApplicationContext","useState","employeeList","departmentList","stateList","context","setContext","Provider","value","useApplicationState","state","useContext","Error","setApplicationState"],"sourceRoot":""}