{"version":3,"file":"component---src-pages-employees-edit-[id]-tsx-7c8bb52b46d96608a546.js","mappings":"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","sources":["webpack://@cognizant-softvision/automation-test-site/./src/components/employee-form.tsx","webpack://@cognizant-softvision/automation-test-site/./src/hooks/department-hooks.ts","webpack://@cognizant-softvision/automation-test-site/./src/hooks/state-hooks.ts","webpack://@cognizant-softvision/automation-test-site/./src/hooks/employee-hooks.ts","webpack://@cognizant-softvision/automation-test-site/./src/pages/Employees/Edit/[id].tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { navigate } from \"gatsby\";\nimport PropTypes from \"prop-types\";\n\nconst EmployeeForm = (props: any) => {\n  const [employee, setEmployee] = useState(props.value);\n\n  return (\n    <form action=\"/Employees/Create\" method=\"post\" novalidate=\"novalidate\">\n      {\n        false && (\n          <input\n            name=\"__RequestVerificationToken\"\n            type=\"hidden\"\n            value=\"-Kv-aAqS8iz1imYFh44kM17rCMFZt2gIIwVtHL3FoRqHCUOshUwDp2i2cz6dq3JpDvHuEX76A2qKyi2bKImCc3otcYA4f0n1ID_Az1hTMx81\"\n          />\n        ) /* I am assuming this is no longer needed. If needed, a dummy field can be added. */\n      }\n      <div className=\"form-horizontal\">\n        <h4>Employee</h4>\n        <hr />\n\n        <div className=\"form-group\">\n          <label className=\"control-label col-md-2\" for=\"EmpFirstName\">\n            First Name\n          </label>\n          <div className=\"col-md-10\">\n            <input\n              className=\"form-control text-box single-line\"\n              data-val=\"true\"\n              data-val-required=\"The First Name field is required.\"\n              id=\"EmpFirstName\"\n              name=\"EmpFirstName\"\n              type=\"text\"\n              value={employee.firstName}\n              onChange={(event) => {\n                let newEmployee = { ...employee };\n                newEmployee.firstName = event.target.value;\n                setEmployee(newEmployee);\n              }}\n            />\n            <span\n              className=\"field-validation-valid text-danger\"\n              data-valmsg-for=\"EmpFirstName\"\n              data-valmsg-replace=\"true\"\n            ></span>\n          </div>\n        </div>\n\n        <div className=\"form-group\">\n          <label className=\"control-label col-md-2\" for=\"EmpLastName\">\n            Last Name\n          </label>\n          <div className=\"col-md-10\">\n            <input\n              className=\"form-control text-box single-line\"\n              data-val=\"true\"\n              data-val-required=\"The Last Name field is required.\"\n              id=\"EmpLastName\"\n              name=\"EmpLastName\"\n              type=\"text\"\n              value={employee.lastName}\n              onChange={(event) => {\n                let newEmployee = { ...employee };\n                newEmployee.lastName = event.target.value;\n                setEmployee(newEmployee);\n              }}\n            />\n            <span\n              className=\"field-validation-valid text-danger\"\n              data-valmsg-for=\"EmpLastName\"\n              data-valmsg-replace=\"true\"\n            ></span>\n          </div>\n        </div>\n\n        <div className=\"form-group\">\n          <label className=\"control-label col-md-2\" for=\"EmpAddress\">\n            Address\n          </label>\n          <div className=\"col-md-10\">\n            <input\n              className=\"form-control text-box single-line\"\n              data-val=\"true\"\n              data-val-required=\"The Address field is required.\"\n              id=\"EmpAddress\"\n              name=\"EmpAddress\"\n              type=\"text\"\n              value={employee.address}\n              onChange={(event) => {\n                let newEmployee = { ...employee };\n                newEmployee.address = event.target.value;\n                setEmployee(newEmployee);\n              }}\n            />\n            <span\n              className=\"field-validation-valid text-danger\"\n              data-valmsg-for=\"EmpAddress\"\n              data-valmsg-replace=\"true\"\n            ></span>\n          </div>\n        </div>\n\n        <div className=\"form-group\">\n          <label className=\"control-label col-md-2\" for=\"StateID\">\n            State\n          </label>\n          <div className=\"col-md-10\">\n            <select\n              className=\"form-control\"\n              id=\"StateID\"\n              name=\"StateID\"\n              value={employee.stateId}\n              onChange={(event) => {\n                let newEmployee = { ...employee };\n                newEmployee.stateId = event.target.value;\n                setEmployee(newEmployee);\n              }}\n            >\n              <option value=\"1\">Alaska</option>\n              <option value=\"2\">Arizona</option>\n              <option value=\"3\">Arkansas</option>\n              <option value=\"4\">California</option>\n              <option value=\"5\">Colorado</option>\n              <option value=\"6\">Connecticut</option>\n              <option value=\"7\">Delaware</option>\n              <option value=\"8\">Florida</option>\n              <option value=\"9\">Georgia</option>\n              <option value=\"10\">Hawaii</option>\n              <option value=\"11\">Idaho</option>\n              <option value=\"12\">Illinois</option>\n              <option value=\"13\">Indiana</option>\n              <option value=\"14\">Iowa</option>\n              <option value=\"15\">Kansas</option>\n              <option value=\"16\">Kentucky</option>\n              <option value=\"17\">Louisiana</option>\n              <option value=\"18\">Maine</option>\n              <option value=\"19\">Maryland</option>\n              <option value=\"20\">Massachusetts</option>\n              <option value=\"21\">Michigan</option>\n              <option value=\"22\">Minnesota</option>\n              <option value=\"23\">Mississippi</option>\n              <option value=\"24\">Missouri</option>\n              <option value=\"25\">Montana</option>\n              <option value=\"26\">Nebraska</option>\n              <option value=\"27\">Nevada</option>\n              <option value=\"28\">New Hampshire</option>\n              <option value=\"29\">New Jersey</option>\n              <option value=\"30\">New Mexico</option>\n              <option value=\"31\">New York</option>\n              <option value=\"32\">North Carolina</option>\n              <option value=\"33\">North Dakota</option>\n              <option value=\"34\">Ohio</option>\n              <option value=\"35\">Oklahoma</option>\n              <option value=\"36\">Oregon</option>\n              <option value=\"37\">Pennsylvania</option>\n              <option value=\"38\">Rhode Island</option>\n              <option value=\"39\">South Carolina</option>\n              <option value=\"40\">South Dakota</option>\n              <option value=\"41\">Tennessee</option>\n              <option value=\"42\">Texas</option>\n              <option value=\"43\">Utah</option>\n              <option value=\"44\">Vermont</option>\n              <option value=\"45\">Virginia</option>\n              <option value=\"46\">Washington</option>\n              <option value=\"47\">West Virginia</option>\n              <option value=\"48\">Wisconsin</option>\n              <option value=\"49\">Wyoming</option>\n            </select>\n            <span\n              className=\"field-validation-valid text-danger\"\n              data-valmsg-for=\"StateID\"\n              data-valmsg-replace=\"true\"\n            ></span>\n          </div>\n        </div>\n\n        <div className=\"form-group\">\n          <label className=\"control-label col-md-2\" for=\"CityID\">\n            City\n          </label>\n          <div className=\"col-md-10\">\n            <input\n              className=\"form-control text-box single-line\"\n              data-val=\"true\"\n              data-val-required=\"The City field is required.\"\n              id=\"CityObj_CityName\"\n              name=\"CityObj.CityName\"\n              type=\"text\"\n              value={employee.city}\n              onChange={(event) => {\n                let newEmployee = { ...employee };\n                newEmployee.city = event.target.value;\n                setEmployee(newEmployee);\n              }}\n            />\n            <span\n              className=\"field-validation-valid text-danger\"\n              data-valmsg-for=\"CityObj.CityName\"\n              data-valmsg-replace=\"true\"\n            ></span>\n          </div>\n        </div>\n\n        <div className=\"form-group\">\n          <label className=\"control-label col-md-2\" for=\"DepartmentID\">\n            Department\n          </label>\n          <div className=\"col-md-10\">\n            <select\n              className=\"form-control\"\n              id=\"DepartmentID\"\n              name=\"DepartmentID\"\n              value={employee.departmentId}\n              onChange={(event) => {\n                let newEmployee = { ...employee };\n                newEmployee.departmentId = event.target.value;\n                setEmployee(newEmployee);\n              }}\n            >\n              <option value=\"1754\">Dev</option>\n              <option value=\"1755\">Quality Engineering</option>\n              <option value=\"1756\">IT</option>\n              <option value=\"1757\">DevOps</option>\n              <option value=\"1790\">HR</option>\n              <option value=\"1791\">Admin</option>\n              <option value=\"1796\">Magenic</option>\n              <option value=\"1810\">sampleDept</option>\n              <option value=\"1815\">test</option>\n              <option value=\"1906\">Magenic Manila Recruitment - 84</option>\n              <option value=\"2163\">Magenic Manila Recruitment</option>\n              <option value=\"2164\">Magenic Manila Recruitment - 101</option>\n              <option value=\"2170\">QE Dept</option>\n              <option value=\"2171\">Chirurgeon</option>\n            </select>\n            <span\n              className=\"field-validation-valid text-danger\"\n              data-valmsg-for=\"DepartmentID\"\n              data-valmsg-replace=\"true\"\n            ></span>\n          </div>\n        </div>\n\n        <div className=\"form-group\">\n          <div className=\"col-md-offset-2 col-md-10\">\n            <input\n              type=\"submit\"\n              onClick={() => props.onSubmit(employee)}\n              value={props.isCreate ? \"Create\" : \"Edit\"}\n              className=\"btn btn-default\"\n            />\n          </div>\n        </div>\n      </div>\n    </form>\n  );\n};\n\nEmployeeForm.propTypes = {\n  value: PropTypes.object.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  isCreate: PropTypes.bool,\n};\n\nexport { EmployeeForm };\n","import { useApplicationState, setApplicationState } from \"./context-hooks\";\r\n\r\nconst getDepartments = () => {\r\n    const state = useApplicationState();\r\n\r\n    return state.departments;\r\n}\r\n\r\nconst useGetDepartment = () => {\r\n    const state = useApplicationState();\r\n\r\n    return (id: number) => {\r\n        return state.departments.find(department => department.id == id);\r\n    } \r\n}\r\n\r\nconst useCreateDepartment = () => {\r\n    const state = useApplicationState();\r\n\r\n    return (department: any) => {\r\n        // TODO: Generate UUID\r\n        department.id = -1;\r\n        const newState = {...state};\r\n        newState.departments.push(department);\r\n\r\n        setApplicationState(newState);\r\n    }\r\n}\r\n\r\nconst useDeleteDepartment = () => {\r\n    const state = useApplicationState();\r\n\r\n    return (id: number) => {\r\n        const newState = {...state};\r\n        newState.departments.splice(newState.departments.findIndex(dept => dept.id == id), 1);\r\n\r\n        setApplicationState(newState);\r\n    }\r\n}\r\n\r\nconst useEditDepartment = () => {\r\n    const state = useApplicationState();\r\n\r\n    return (id: number, department: any) => {\r\n        const newState = {...state};\r\n        const index = newState.departments.findIndex(dept => dept.id == id);\r\n        newState.departments[index] = Object.assign(newState.departments[index], department);\r\n\r\n        setApplicationState(newState);\r\n    }\r\n}\r\n\r\nexport { getDepartments, useGetDepartment, useCreateDepartment, useDeleteDepartment, useEditDepartment };","import { useApplicationState, setApplicationState } from \"./context-hooks\";\r\n\r\nconst getStates = () => {\r\n    const state = useApplicationState();\r\n\r\n    return state.states;\r\n}\r\n\r\nconst useGetState = () => {\r\n    const state = useApplicationState();\r\n\r\n    return (id: number) => {\r\n        return state.states.find(stateLoc => stateLoc.id == id);\r\n    } \r\n}\r\n\r\nexport { getStates, useGetState };","import { useApplicationState, setApplicationState } from \"./context-hooks\";\r\nimport { useGetDepartment } from \"./department-hooks\";\r\nimport { useGetState } from \"./state-hooks\";\r\n\r\nconst getEmployees = () => {\r\n    const state = useApplicationState();\r\n    const getState = useGetState();\r\n    const getDepartment = useGetDepartment();\r\n\r\n    return state.employees.map(employee => {\r\n        employee.state = getState(employee.stateId)?.state;\r\n        employee.department = getDepartment(employee.departmentId)?.department;\r\n        return employee;\r\n    });\r\n}\r\n\r\nconst useGetEmployee = () => {\r\n    const state = useApplicationState();\r\n    const getState = useGetState();\r\n    const getDepartment = useGetDepartment();\r\n\r\n    return (id: number) => {\r\n        let employee = state.employees.find(empl => empl.id == id);\r\n        employee.state = getState(employee.stateId).state;\r\n        employee.department = getDepartment(employee.departmentId).department;\r\n        return employee;\r\n    } \r\n}\r\n\r\nconst useCreateEmployee = () => {\r\n    const state = useApplicationState();\r\n\r\n    return (employee: any) => {\r\n        // TODO: Generate UUID\r\n        employee.id = -1;\r\n        const newState = {...state};\r\n        newState.employees.push(employee);\r\n\r\n        setApplicationState(newState);\r\n    }\r\n}\r\n\r\nconst useDeleteEmployee = () => {\r\n    const state = useApplicationState();\r\n\r\n    return (id: number) => {\r\n        const newState = {...state};\r\n        newState.employees.splice(newState.employees.findIndex(empl => empl.id == id), 1);\r\n\r\n        setApplicationState(newState);\r\n    }\r\n}\r\n\r\nconst useEditEmployee = () => {\r\n    const state = useApplicationState();\r\n\r\n    return (id: number, employee: any) => {\r\n        const newState = {...state};\r\n        const index = newState.employees.findIndex(empl => empl.id == id);\r\n        newState.employees[index] = Object.assign(newState.employees[index], employee);\r\n\r\n        setApplicationState(newState);\r\n    }\r\n}\r\n\r\nexport { getEmployees, useCreateEmployee, useDeleteEmployee, useGetEmployee, useEditEmployee };","import React, { useEffect, useState } from \"react\";\nimport { navigate } from \"gatsby\";\nimport { EmployeeForm } from \"../../../components/employee-form\";\nimport { useEditEmployee, useGetEmployee } from \"../../../hooks/employee-hooks\";\nimport { Layout } from \"../../../components/shared/layout\";\n\nconst Edit = (props: any) => {\n  const EditInner = (props: any) => {\n    let [employee, setEmployee] = useState(undefined);\n    const getEmployee = useGetEmployee();\n    const editEmployee = useEditEmployee();\n\n    const [id, setId] = useState<number>(undefined);\n\n    useEffect(() => {\n      const queryId = props.id;\n      setId(queryId);\n      const employee = getEmployee(queryId);\n      setEmployee(employee);\n    }, []);\n\n    return (\n      <React.Fragment>\n        <h2>Edit</h2>\n        {!!employee && (\n          <EmployeeForm\n            value={employee}\n            onSubmit={(employee) => {\n              setEmployee(employee);\n              editEmployee(id, employee);\n              navigate(\"/Employees\");\n            }}\n          />\n        )}\n      </React.Fragment>\n    );\n  };\n  return (\n    <Layout title=\"Edit\">\n      <EditInner id={props.params.id} />\n    </Layout>\n  );\n};\n\nexport default Edit;\n"],"names":["EmployeeForm","props","useState","value","employee","setEmployee","action","method","novalidate","className","for","id","name","type","firstName","onChange","event","newEmployee","target","lastName","address","stateId","city","departmentId","onClick","onSubmit","isCreate","getDepartments","useApplicationState","departments","useGetDepartment","state","find","department","useCreateDepartment","newState","push","setApplicationState","useDeleteDepartment","splice","findIndex","dept","useEditDepartment","index","Object","assign","useGetState","states","stateLoc","getEmployees","getState","getDepartment","employees","map","useGetEmployee","empl","useCreateEmployee","useDeleteEmployee","useEditEmployee","EditInner","undefined","getEmployee","editEmployee","setId","useEffect","queryId","navigate","title","params"],"sourceRoot":""}